// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication1.Database;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(StudentDbContext))]
    [Migration("20250415074908_CreateDatabase3")]
    partial class CreateDatabase3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Cafedre", b =>
                {
                    b.Property<int>("CafedreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("cafedre_id")
                        .HasComment("Идентификатор записи кафедры");

                    b.Property<int>("CafedreCreationDate")
                        .HasColumnType("int4")
                        .HasColumnName("c_cafedre_creation_date")
                        .HasComment("Дата основания кафедры");

                    b.Property<string>("CafedreMainProfessor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_cafedre_main_professor")
                        .HasComment("Старший преподаватель кафедры");

                    b.Property<string>("CafedreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_cafedre_name")
                        .HasComment("Название кафедры");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int4")
                        .HasColumnName("f_professor_id")
                        .HasComment("ID профессора");

                    b.HasKey("CafedreId")
                        .HasName("pk_cd_cafedre_cafedre_id");

                    b.ToTable("Cafedres");
                });

            modelBuilder.Entity("WebApplication1.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("discipline_id")
                        .HasComment("Идентификатор записи дисциплины");

                    b.Property<string>("DisciplineName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_discipline_name")
                        .HasComment("Название дисциплины");

                    b.HasKey("DisciplineId")
                        .HasName("pk_cd_discipline_discipline_id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.Property<int>("ProfessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("professor_id")
                        .HasComment("Идентификатор записи профессора");

                    b.Property<int>("CafedreId")
                        .HasColumnType("int4")
                        .HasColumnName("f_cafedre_id")
                        .HasComment("ID кафедры");

                    b.Property<int?>("CafedreId1")
                        .HasColumnType("integer");

                    b.Property<string>("ProfessorFirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_professor_first_name")
                        .HasComment("Имя профессора");

                    b.Property<string>("ProfessorLastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_professor_last_name")
                        .HasComment("Фамилия профессора");

                    b.Property<string>("ProfessorMiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_professor_middle_name")
                        .HasComment("Отчество профессора");

                    b.Property<string>("ProfessorTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_professor_title")
                        .HasComment("Должность профессора");

                    b.HasKey("ProfessorId")
                        .HasName("pk_cd_professor_professor_id");

                    b.HasIndex("CafedreId1");

                    b.HasIndex(new[] { "CafedreId" }, "idx+cd_professor_fk_f_cafedre_id");

                    b.ToTable("cd_professor", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ScienceState", b =>
                {
                    b.Property<int>("ScienceStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("science_state_id")
                        .HasComment("Идентификатор записи научной степени");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScienceStateId"));

                    b.Property<string>("ScienceStateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_science_state_name")
                        .HasComment("Название научной степени");

                    b.HasKey("ScienceStateId")
                        .HasName("pk_cd_science_state_science_state_id");

                    b.ToTable("ScienceStates");
                });

            modelBuilder.Entity("WebApplication1.Models.Title", b =>
                {
                    b.Property<int>("TitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("title_id")
                        .HasComment("Идентификатор записи должности");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TitleId"));

                    b.Property<string>("TitleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar")
                        .HasColumnName("c_title_name")
                        .HasComment("Название должности");

                    b.HasKey("TitleId")
                        .HasName("pk_cd_title_title_id");

                    b.ToTable("Titles");
                });

            modelBuilder.Entity("WebApplication1.Models.WorkTime", b =>
                {
                    b.Property<int>("WorkTimeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("work_time_id")
                        .HasComment("Идентификатор записи рабочего времени");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkTimeId"));

                    b.Property<int>("CafedreId")
                        .HasColumnType("int4")
                        .HasColumnName("f_cafedre_id")
                        .HasComment("ID кафедры");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int4")
                        .HasColumnName("f_discipline_id")
                        .HasComment("ID дисциплины");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int4")
                        .HasColumnName("f_professor_id")
                        .HasComment("ID профессора");

                    b.Property<int>("WorkTimeHours")
                        .HasColumnType("int4")
                        .HasColumnName("c_work_time_hours")
                        .HasComment("Количество часов");

                    b.HasKey("WorkTimeId")
                        .HasName("pk_cd_work_time_work_time_id");

                    b.HasIndex(new[] { "CafedreId" }, "idx+cd_work_time_fk_f_cafedre_id");

                    b.HasIndex(new[] { "DisciplineId" }, "idx+cd_work_time_fk_f_discipline_id");

                    b.HasIndex(new[] { "ProfessorId" }, "idx+cd_work_time_fk_f_professor_id");

                    b.ToTable("cd_work_time", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Cafedre", b =>
                {
                    b.HasOne("WebApplication1.Models.WorkTime", null)
                        .WithMany("Cafedre")
                        .HasForeignKey("CafedreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_f_cafedre_id");
                });

            modelBuilder.Entity("WebApplication1.Models.Discipline", b =>
                {
                    b.HasOne("WebApplication1.Models.WorkTime", null)
                        .WithMany("Discipline")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_f_discipline_id");
                });

            modelBuilder.Entity("WebApplication1.Models.Professor", b =>
                {
                    b.HasOne("WebApplication1.Models.Cafedre", "Cafedre")
                        .WithMany()
                        .HasForeignKey("CafedreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_f_cafedre_id");

                    b.HasOne("WebApplication1.Models.Cafedre", null)
                        .WithMany("Professor")
                        .HasForeignKey("CafedreId1");

                    b.HasOne("WebApplication1.Models.WorkTime", null)
                        .WithMany("Professor")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_f_professor_id");

                    b.Navigation("Cafedre");
                });

            modelBuilder.Entity("WebApplication1.Models.Cafedre", b =>
                {
                    b.Navigation("Professor");
                });

            modelBuilder.Entity("WebApplication1.Models.WorkTime", b =>
                {
                    b.Navigation("Cafedre");

                    b.Navigation("Discipline");

                    b.Navigation("Professor");
                });
#pragma warning restore 612, 618
        }
    }
}
